CCS PCD C Compiler, Version 5.015, 5967               17-Sep-18 01:45

               Filename:   P:\Module67\control\Common_PIC\src\main.lst

               ROM used:   3258 bytes (10%)
                           Largest free fragment is 27458
               RAM used:   147 (2%) at main() level
                           185 (2%) worst case
               Stack size: 128

*
0C00:  GOTO    1834
*
0C44:  GOTO    16E6
*
0C74:  GOTO    17AA
*
0C98:  GOTO    17E2
.................... /* 
....................     robotics-za.blogspot.com 
....................     https://github.com/vixtory09678/Common_PIC 
.................... */ 
....................  
.................... #include "lib/24FJ48GA002.h" 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  MOV     W5,[W15++]
0DFE:  MOV     #C,W5
0E00:  REPEAT  #3
0E02:  MOV     [W5++],[W15++]
0E04:  CLR     W9
0E06:  MOV     #8000,W8
0E08:  BTSC.B  43.0
0E0A:  XOR     W8,W3,W3
0E0C:  CP0     W0
0E0E:  BRA     NZ,E16
0E10:  MOV     #7FFF,W10
0E12:  AND     W1,W10,W10
0E14:  BTSS.B  42.1
0E16:  MOV     W1,W10
0E18:  XOR     W3,W10,W11
0E1A:  MOV     W1,W6
0E1C:  MOV     W3,W7
0E1E:  MOV     W3,W12
0E20:  BCLR.B  42.1
0E22:  BCLR.B  42.0
0E24:  RLC     W6,W6
0E26:  SWAP    W6
0E28:  AND     #FF,W6
0E2A:  CP0     W6
0E2C:  BRA     Z,F70
0E2E:  BCLR.B  42.1
0E30:  BCLR.B  42.0
0E32:  RLC     W7,W7
0E34:  SWAP    W7
0E36:  AND     #FF,W7
0E38:  CP0     W7
0E3A:  BRA     Z,F7A
0E3C:  BCLR.B  42.1
0E3E:  BCLR.B  42.0
0E40:  CP      W7,W6
0E42:  BRA     Z,F7C
0E44:  BRA     N,F8C
0E46:  BCLR    W9.0
0E48:  BSET    W9.1
0E4A:  SUB     W7,W6,W8
0E4C:  MOV     W7,W6
0E4E:  AND     #FF,W1
0E50:  BSET    W1.7
0E52:  AND     #FF,W3
0E54:  BSET    W3.7
0E56:  MOV     #28,W7
0E58:  CP      W7,W8
0E5A:  BRA     N,E7E
0E5C:  BCLR.B  42.1
0E5E:  BCLR.B  42.0
0E60:  RRC     W1,W1
0E62:  RRC     W0,W0
0E64:  DEC     W8,W8
0E66:  BRA     NZ,E5C
0E68:  BRA     E84
0E6A:  MOV     #28,W7
0E6C:  CP      W7,W8
0E6E:  BRA     N,E82
0E70:  BCLR.B  42.1
0E72:  BCLR.B  42.0
0E74:  RRC     W3,W3
0E76:  RRC     W2,W2
0E78:  DEC     W8,W8
0E7A:  BRA     NZ,E70
0E7C:  BRA     E9C
0E7E:  MOV     W2,W0
0E80:  MOV     W3,W1
0E82:  BRA     F0A
0E84:  BTSS    W11.F
0E86:  BRA     EAA
0E88:  BTSC    W9.4
0E8A:  MOV     W12,W11
0E8C:  NEG     W0,W0
0E8E:  BRA     Z,E94
0E90:  COM.B   W1L,W1L
0E92:  BRA     E96
0E94:  NEG     W1,W1
0E96:  BTSC    W9.4
0E98:  BRA     EF0
0E9A:  BRA     EAA
0E9C:  BTSS    W11.F
0E9E:  BRA     EAA
0EA0:  NEG     W2,W2
0EA2:  BRA     Z,EA8
0EA4:  COM.B   W3L,W3L
0EA6:  BRA     EAA
0EA8:  NEG     W3,W3
0EAA:  AND     #FF,W5
0EAC:  BCLR.B  42.1
0EAE:  BCLR.B  42.0
0EB0:  ADD     W0,W2,W0
0EB2:  ADDC.B  W1L,W3L,W1L
0EB4:  BTSC.B  42.0
0EB6:  BSET    W9.3
0EB8:  BTSC    W9.0
0EBA:  BRA     ECE
0EBC:  BTSC    W9.1
0EBE:  BRA     EC2
0EC0:  BRA     ED8
0EC2:  BTSC    W11.F
0EC4:  BRA     EF0
0EC6:  BTSC    W9.3
0EC8:  BRA     F1C
0ECA:  BSET    W9.6
0ECC:  BRA     F0A
0ECE:  BTSC    W11.F
0ED0:  BRA     EF0
0ED2:  BTSC    W9.3
0ED4:  BRA     F1C
0ED6:  BRA     F0A
0ED8:  BCLR    W9.2
0EDA:  BTSC    W11.F
0EDC:  BRA     EE6
0EDE:  MOV     W10,W11
0EE0:  BTSC    W9.3
0EE2:  BRA     F1C
0EE4:  BRA     F52
0EE6:  BSET    W9.4
0EE8:  XOR.B   #80,W1L
0EEA:  BTSC    W1.7
0EEC:  BRA     E88
0EEE:  MOV     W10,W11
0EF0:  AND     #FF,W1
0EF2:  IOR      W0,  W1,W7
0EF4:  BRA     Z,F0A
0EF6:  BTSC    W1.7
0EF8:  BRA     F0A
0EFA:  BCLR.B  42.1
0EFC:  BCLR.B  42.0
0EFE:  RLC     W0,W0
0F00:  RLC     W1,W1
0F02:  DEC     W6,W6
0F04:  BTSC.B  42.1
0F06:  BRA     F6A
0F08:  BRA     EF6
0F0A:  BTSC    W9.0
0F0C:  MOV     W10,W11
0F0E:  BTSC    W9.1
0F10:  MOV     W12,W11
0F12:  BTSS    W9.5
0F14:  BRA     F4A
0F16:  BTSC    W10.F
0F18:  BSET    W0.8
0F1A:  BRA     F52
0F1C:  BSET.B  42.0
0F1E:  RRC.B   W1L,W1L
0F20:  RRC     W0,W0
0F22:  BTSC.B  42.0
0F24:  BSET    W9.5
0F26:  INC     W6,W6
0F28:  BRA     Z,F6A
0F2A:  BTSS    W9.5
0F2C:  BRA     F3E
0F2E:  INC     W0,W0
0F30:  BRA     NZ,F3E
0F32:  INC.B   W1L,W1L
0F34:  BRA     NZ,F3E
0F36:  RRC.B   W1L,W1L
0F38:  RRC     W0,W0
0F3A:  INC     W6,W6
0F3C:  BRA     Z,F6A
0F3E:  BTSC    W9.0
0F40:  MOV     W10,W11
0F42:  BTSC    W9.1
0F44:  MOV     W12,W11
0F46:  BTSC.B  42.1
0F48:  BRA     F6A
0F4A:  BTSC    W9.6
0F4C:  MOV     W10,W11
0F4E:  BTSC    W9.7
0F50:  MOV     W12,W11
0F52:  IOR      W0,  W1,W2
0F54:  BRA     Z,F9C
0F56:  BCLR    W1.7
0F58:  SWAP    W6
0F5A:  BCLR.B  42.1
0F5C:  BCLR.B  42.0
0F5E:  RRC     W6,W6
0F60:  XOR     W6,W1,W1
0F62:  BSET    W1.F
0F64:  BTSS    W11.F
0F66:  BCLR    W1.F
0F68:  BRA     F9C
0F6A:  MOV     #0,W0
0F6C:  MOV     #0,W1
0F6E:  BRA     F9C
0F70:  BTSC    W10.F
0F72:  XOR     W8,W3,W3
0F74:  MOV     W2,W0
0F76:  MOV     W3,W1
0F78:  BRA     F9C
0F7A:  BRA     F9C
0F7C:  AND     #FF,W3
0F7E:  BSET    W3.7
0F80:  AND     #FF,W1
0F82:  BSET    W1.7
0F84:  BTSC    W11.F
0F86:  BCLR    W3.7
0F88:  BSET    W9.2
0F8A:  BRA     E9C
0F8C:  SUB     W6,W7,W8
0F8E:  AND     #FF,W1
0F90:  BSET    W1.7
0F92:  AND     #FF,W3
0F94:  BSET    W3.7
0F96:  BCLR    W9.1
0F98:  BSET    W9.0
0F9A:  BRA     E6A
0F9C:  MOV     #12,W5
0F9E:  REPEAT  #3
0FA0:  MOV     [--W15],[W5--]
0FA2:  MOV     [--W15],W5
0FA4:  RETURN  
0FA6:  MOV     W5,[W15++]
0FA8:  MOV     #C,W5
0FAA:  REPEAT  #3
0FAC:  MOV     [W5++],[W15++]
0FAE:  MOV     W0,W4
0FB0:  MOV     W1,W5
0FB2:  MOV     W2,W6
0FB4:  MOV     W3,W7
0FB6:  CLR     W0
0FB8:  CLR     W1
0FBA:  CLR     W2
0FBC:  CLR     W3
0FBE:  BCLR    W8.0
0FC0:  BTSS    W7.F
0FC2:  BRA     FCE
0FC4:  BSET    W8.0
0FC6:  NEG     W4,W4
0FC8:  COM     W5,W5
0FCA:  COM     W6,W6
0FCC:  COM     W7,W7
0FCE:  IOR      W4,  W5,W9
0FD0:  BRA     NZ,FD6
0FD2:  IOR      W6,  W7,W9
0FD4:  BRA     Z,1000
0FD6:  MOV     #473,W9
0FD8:  BTSC    W3.4
0FDA:  BRA     FF2
0FDC:  BCLR.B  42.0
0FDE:  RLC     W4,W4
0FE0:  RLC     W5,W5
0FE2:  RLC     W6,W6
0FE4:  RLC     W7,W7
0FE6:  RLC     W0,W0
0FE8:  RLC     W1,W1
0FEA:  RLC     W2,W2
0FEC:  RLC     W3,W3
0FEE:  DEC     W9,W9
0FF0:  BRA     NZ,FD8
0FF2:  SL      W9,#4,W9
0FF4:  BCLR.B  42.0
0FF6:  BCLR    W9.F
0FF8:  BCLR    W3.4
0FFA:  XOR     W9,W3,W3
0FFC:  BTSC    W8.0
0FFE:  BSET    W3.F
1000:  MOV     #12,W5
1002:  REPEAT  #3
1004:  MOV     [--W15],[W5--]
1006:  MOV     [--W15],W5
1008:  RETURN  
100A:  MOV     W8,[W15++]
100C:  MOV     #12,W8
100E:  REPEAT  #4
1010:  MOV     [W8++],[W15++]
1012:  XOR     W3,W7,W13
1014:  MOV     W3,W8
1016:  MOV     W7,W9
1018:  MOV     #7FF,W10
101A:  BCLR.B  42.0
101C:  BCLR.B  42.1
101E:  ASR     W8,#4,W8
1020:  AND     W10,W8,W8
1022:  CP0     W8
1024:  BRA     Z,10FE
1026:  BCLR.B  42.0
1028:  BCLR.B  42.1
102A:  ASR     W9,#4,W9
102C:  AND     W10,W9,W9
102E:  CP0     W9
1030:  BRA     Z,10FE
1032:  CLR     W10
1034:  SUB     W8,W9,W12
1036:  BRA     NC,103E
1038:  ADD     #3FF,W12
103A:  BRA     C,10FE
103C:  BRA     1046
103E:  MOV     #401,W11
1040:  SUB     W12,W11,W12
1042:  BRA     NC,10FE
1044:  BRA     Z,10FE
1046:  CLR     W8
1048:  CLR     W9
104A:  CLR     W10
104C:  CLR     W11
104E:  AND     #1F,W3
1050:  BSET    W3.4
1052:  AND     #1F,W7
1054:  BSET    W7.4
1056:  MOV     W12,[W15++]
1058:  MOV     #36,W12
105A:  SUB     W0,W4,W0
105C:  SUBB    W1,W5,W1
105E:  SUBB    W2,W6,W2
1060:  SUBB    W3,W7,W3
1062:  BRA     N,1068
1064:  BRA     C,1072
1066:  BRA     NZ,1074
1068:  ADD     W0,W4,W0
106A:  ADDC    W1,W5,W1
106C:  ADDC    W2,W6,W2
106E:  ADDC    W3,W7,W3
1070:  BRA     1074
1072:  BSET    W8.0
1074:  DEC     W12,W12
1076:  BRA     Z,108E
1078:  BCLR.B  42.0
107A:  RLC     W0,W0
107C:  RLC     W1,W1
107E:  RLC     W2,W2
1080:  RLC     W3,W3
1082:  BCLR.B  42.0
1084:  RLC     W8,W8
1086:  RLC     W9,W9
1088:  RLC     W10,W10
108A:  RLC     W11,W11
108C:  BRA     105A
108E:  MOV     [--W15],W12
1090:  BTSC    W11.5
1092:  BRA     1096
1094:  BRA     10A2
1096:  BCLR.B  42.0
1098:  RRC     W11,W11
109A:  RRC     W10,W10
109C:  RRC     W9,W9
109E:  RRC     W8,W8
10A0:  BRA     10A8
10A2:  DEC     W12,W12
10A4:  BCLR.B  42.0
10A6:  BRA     Z,10FE
10A8:  BTSC.B  42.0
10AA:  BRA     10BE
10AC:  RLC     W0,W0
10AE:  RLC     W1,W1
10B0:  RLC     W2,W2
10B2:  RLC     W3,W3
10B4:  SUB     W0,W4,W4
10B6:  SUBB    W1,W5,W5
10B8:  SUBB    W2,W6,W6
10BA:  SUBB    W3,W7,W7
10BC:  BRA     NC,10E8
10BE:  INC     W8,W8
10C0:  BRA     NZ,10E8
10C2:  INC     W9,W9
10C4:  BRA     NZ,10E8
10C6:  INC     W10,W10
10C8:  BRA     NZ,10E8
10CA:  INC     W11,W11
10CC:  BRA     NZ,10E8
10CE:  INC     W12,W12
10D0:  BRA     Z,10FE
10D2:  BRA     10E8
10D4:  DEC     W12,W12
10D6:  BRA     Z,10FE
10D8:  BTSC    W11.4
10DA:  BRA     10E8
10DC:  BCLR.B  42.0
10DE:  RLC     W8,W8
10E0:  RLC     W9,W9
10E2:  RLC     W10,W10
10E4:  RLC     W11,W11
10E6:  BRA     10D8
10E8:  SL      W12,#4,W12
10EA:  BCLR.B  42.0
10EC:  BCLR    W12.F
10EE:  BTSC    W13.F
10F0:  BSET    W12.F
10F2:  BCLR    W11.4
10F4:  XOR     W12,W11,W3
10F6:  MOV     W10,W2
10F8:  MOV     W9,W1
10FA:  MOV     W8,W0
10FC:  BRA     1108
10FE:  MOV     #0,W0
1100:  MOV     #0,W1
1102:  MOV     #0,W2
1104:  MOV     #0,W3
1106:  BRA     1108
1108:  MOV     #1A,W8
110A:  REPEAT  #4
110C:  MOV     [--W15],[W8--]
110E:  MOV     [--W15],W8
1110:  RETURN  
1112:  MOV     W5,[W15++]
1114:  MOV     #C,W5
1116:  REPEAT  #5
1118:  MOV     [W5++],[W15++]
111A:  MOV     W3,W8
111C:  MOV     W2,W7
111E:  MOV     W1,W6
1120:  MOV     W0,W5
1122:  MOV     W3,W9
1124:  MOV     #473,W11
1126:  ASR     W3,#4,W3
1128:  MOV     #7FF,W10
112A:  AND     W10,W3,W3
112C:  SUB     W11,W3,W11
112E:  AND     #1F,W8
1130:  BSET    W8.4
1132:  CLR     W0
1134:  CLR     W1
1136:  CLR     W2
1138:  CLR     W3
113A:  BCLR.B  42.0
113C:  RRC     W8,W8
113E:  RRC     W7,W7
1140:  RRC     W6,W6
1142:  RRC     W5,W5
1144:  RRC     W3,W3
1146:  RRC     W2,W2
1148:  RRC     W1,W1
114A:  RRC     W0,W0
114C:  DEC     W11,W11
114E:  BRA     NZ,113A
1150:  BTSS    W9.F
1152:  BRA     115E
1154:  NEG     W0,W0
1156:  COM     W1,W1
1158:  COM     W2,W2
115A:  COM     W3,W3
115C:  BRA     115E
115E:  MOV     #16,W5
1160:  REPEAT  #5
1162:  MOV     [--W15],[W5--]
1164:  MOV     [--W15],W5
1166:  RETURN  
1168:  MOV     W8,[W15++]
116A:  MOV     #12,W8
116C:  REPEAT  #4
116E:  MOV     [W8++],[W15++]
1170:  CLR     W11
1172:  MUL.UU  W12,#0,W12
1174:  MOV     W3,W8
1176:  MOV     W7,W9
1178:  MOV     #7FF,W10
117A:  BCLR.B  42.0
117C:  BCLR.B  42.1
117E:  ASR     W8,#4,W8
1180:  AND     W10,W8,W8
1182:  CP0     W8
1184:  BRA     Z,1268
1186:  BCLR.B  42.0
1188:  BCLR.B  42.1
118A:  ASR     W9,#4,W9
118C:  AND     W10,W9,W9
118E:  CP0     W9
1190:  BRA     Z,1268
1192:  ADD     W9,W8,W8
1194:  BTSC    W9.B
1196:  BRA     11A0
1198:  SUB     #3FF,W8
119A:  BRA     Z,1268
119C:  BRA     NC,1268
119E:  BRA     11A6
11A0:  MOV     #401,W10
11A2:  ADD.B   W10L,W5L,W5L
11A4:  BRA     C,1268
11A6:  XOR     W3,W7,W13
11A8:  BCLR.B  42.0
11AA:  BCLR.B  42.1
11AC:  AND     #F,W3
11AE:  BSET    W3.4
11B0:  AND     #F,W7
11B2:  BSET    W7.4
11B4:  MOV     W8,[W15++]
11B6:  MUL.UU  W4,W1,W8
11B8:  MUL.UU  W5,W0,W10
11BA:  ADD     W8,W10,W10
11BC:  ADDC    W9,W11,W11
11BE:  ADDC    #0,W12
11C0:  MUL.UU  W4,W2,W8
11C2:  ADD     W8,W11,W11
11C4:  ADDC    W9,W12,W12
11C6:  MUL.UU  W5,W1,W8
11C8:  CLR     W10
11CA:  ADD     W8,W11,W11
11CC:  ADDC    W9,W12,W12
11CE:  ADDC    #0,W10
11D0:  MUL.UU  W6,W0,W8
11D2:  ADD     W8,W11,W11
11D4:  ADDC    W9,W12,W12
11D6:  ADDC    #0,W10
11D8:  CLR     W11
11DA:  MUL.UU  W4,W3,W8
11DC:  ADD     W8,W12,W12
11DE:  ADDC    W9,W10,W10
11E0:  ADDC    #0,W11
11E2:  MUL.UU  W5,W2,W8
11E4:  ADD     W8,W12,W12
11E6:  ADDC    W9,W10,W10
11E8:  ADDC    #0,W11
11EA:  MUL.UU  W6,W1,W8
11EC:  ADD     W8,W12,W12
11EE:  ADDC    W9,W10,W10
11F0:  ADDC    #0,W11
11F2:  MUL.UU  W7,W0,W8
11F4:  ADD     W8,W12,W12
11F6:  ADDC    W9,W10,W10
11F8:  ADDC    #0,W11
11FA:  MOV     W12,W0
11FC:  CLR     W12
11FE:  MUL.UU  W5,W3,W8
1200:  ADD     W8,W10,W10
1202:  ADDC    W9,W11,W11
1204:  ADDC    #0,W12
1206:  MUL.UU  W6,W2,W8
1208:  ADD     W8,W10,W10
120A:  ADDC    W9,W11,W11
120C:  ADDC    #0,W12
120E:  MUL.UU  W6,W3,W8
1210:  ADD     W8,W11,W11
1212:  ADDC    W9,W12,W12
1214:  MUL.UU  W7,W1,W8
1216:  ADD     W8,W10,W10
1218:  ADDC    W9,W11,W11
121A:  ADDC    #0,W12
121C:  MUL.UU  W7,W2,W8
121E:  ADD     W8,W11,W11
1220:  ADDC    W9,W12,W12
1222:  MUL.UU  W7,W3,W8
1224:  ADD     W8,W12,W12
1226:  MOV     W10,W1
1228:  MOV     W11,W2
122A:  MOV     W12,W3
122C:  MOV     #5,W4
122E:  BCLR.B  42.0
1230:  RRC     W3,W3
1232:  RRC     W2,W2
1234:  RRC     W1,W1
1236:  RRC     W0,W0
1238:  DEC     W4,W4
123A:  BRA     NZ,122E
123C:  MOV     [--W15],W8
123E:  INC     W8,W8
1240:  IOR      W0,  W1,W6
1242:  BRA     Z,1246
1244:  BRA     124A
1246:  IOR      W2,  W3,W6
1248:  BRA     Z,125A
124A:  BTSC    W3.4
124C:  BRA     125A
124E:  BCLR.B  42.0
1250:  RLC     W0,W0
1252:  RLC     W1,W1
1254:  RLC     W2,W2
1256:  RLC     W3,W3
1258:  DEC     W8,W8
125A:  SL      W8,#4,W8
125C:  BCLR    W3.F
125E:  BTSC    W13.F
1260:  BSET    W3.F
1262:  BCLR    W3.4
1264:  XOR     W8,W3,W3
1266:  BRA     126E
1268:  MUL.UU  W0,#0,W0
126A:  MUL.UU  W0,#0,W2
126C:  BRA     126E
126E:  MOV     #1A,W8
1270:  REPEAT  #4
1272:  MOV     [--W15],[W8--]
1274:  MOV     [--W15],W8
1276:  RETURN  
1278:  MOV     W5,[W15++]
127A:  MOV     W6,[W15++]
127C:  MOV     W3,W4
127E:  MOV     W3,W6
1280:  BCLR.B  42.0
1282:  ASR     W4,#4,W4
1284:  MOV     #7FF,W5
1286:  AND     W5,W4,W4
1288:  BRA     NZ,1290
128A:  MUL.UU  W0,#0,W0
128C:  CLR     W2
128E:  BRA     12B6
1290:  SUB     #380,W4
1292:  AND     #F,W3
1294:  MOV     #3,W7
1296:  BCLR.B  42.0
1298:  RLC     W0,W0
129A:  RLC     W1,W1
129C:  RLC     W2,W2
129E:  RLC     W3,W3
12A0:  DEC     W7,W7
12A2:  BRA     NZ,1296
12A4:  MOV     W1,W0
12A6:  MOV     W2,W1
12A8:  BCLR    W3.7
12AA:  SWAP    W4
12AC:  BCLR.B  42.0
12AE:  RRC     W4,W4
12B0:  BTSC    W6.F
12B2:  BSET    W4.F
12B4:  XOR     W4,W3,W2
12B6:  MOV     [--W15],W6
12B8:  MOV     [--W15],W5
12BA:  RETURN  
*
1342:  MOV     W0,W2
1344:  MOV     W1,W3
1346:  MOV.B   W1L,W0L
1348:  SWAP    W0
134A:  BSET    W0.F
134C:  RLC     W1,W1
134E:  SWAP    W1
1350:  ZE      W1,W1
1352:  MOV     #8E,W4
1354:  SUB.B   W4L,W1L,W1L
1356:  BRA     Z,1364
1358:  CP0     W0
135A:  BRA     Z,1364
135C:  BCLR.B  42.0
135E:  RRC     W0,W0
1360:  DEC     W1,W1
1362:  BRA     NZ,1358
1364:  BTSS    W3.F
1366:  BRA     136C
1368:  NEG     W0,W0
136A:  BRA     136C
136C:  RETURN  
136E:  MOV     W5,[W15++]
1370:  MOV     W6,[W15++]
1372:  MOV     W0,W4
1374:  MOV     W1,W5
1376:  CLR     W0
1378:  CLR     W1
137A:  BCLR    W6.0
137C:  BTSS    W5.F
137E:  BRA     138C
1380:  BSET    W6.0
1382:  NEG     W4,W4
1384:  BRA     Z,138A
1386:  COM     W5,W5
1388:  BRA     138C
138A:  NEG     W5,W5
138C:  IOR      W4,  W5,W3
138E:  BRA     Z,13B6
1390:  CLR     W2
1392:  MOV     #B6,W1
1394:  BTSC    W2.7
1396:  BRA     13A6
1398:  BCLR.B  42.0
139A:  RLC     W4,W4
139C:  RLC     W5,W5
139E:  RLC     W0,W0
13A0:  RLC     W2,W2
13A2:  DEC     W1,W1
13A4:  BRA     NZ,1394
13A6:  SWAP    W1
13A8:  BCLR.B  42.0
13AA:  RRC     W1,W1
13AC:  BCLR    W1.F
13AE:  BCLR    W2.7
13B0:  XOR.B   W2L,W1L,W1L
13B2:  BTSC    W6.0
13B4:  BSET    W1.F
13B6:  MOV     [--W15],W6
13B8:  MOV     [--W15],W5
13BA:  RETURN  
13BC:  MOV     W5,[W15++]
13BE:  MOV     #C,W5
13C0:  REPEAT  #4
13C2:  MOV     [W5++],[W15++]
13C4:  MOV     W0,W4
13C6:  MOV     W1,W5
13C8:  MOV     W3,W7
13CA:  MOV     W2,W6
13CC:  BCLR.B  42.0
13CE:  BCLR.B  42.1
13D0:  RLC     W1,W1
13D2:  SWAP    W1
13D4:  AND     #FF,W1
13D6:  CP0     W1
13D8:  BRA     Z,1470
13DA:  BCLR.B  42.0
13DC:  BCLR.B  42.1
13DE:  RLC     W3,W3
13E0:  SWAP    W3
13E2:  AND     #FF,W3
13E4:  CP0     W3
13E6:  BRA     Z,1470
13E8:  ZE      W0,W0
13EA:  ADD.B   W3L,W1L,W0L
13EC:  BRA     C,13F6
13EE:  SUB     #7F,W0
13F0:  BRA     Z,1470
13F2:  BRA     NC,1470
13F4:  BRA     13FA
13F6:  ADD.B   #81,W0L
13F8:  BRA     C,1470
13FA:  XOR     W5,W7,W10
13FC:  BCLR.B  42.0
13FE:  BCLR.B  42.1
1400:  AND     #FF,W5
1402:  BSET    W5.7
1404:  BCLR.B  42.0
1406:  AND     #FF,W7
1408:  BSET    W7.7
140A:  MUL.UU  W4,W6,W2
140C:  MUL.UU  W5,W6,W8
140E:  ADDC    W8,W3,W3
1410:  MOV     W9,W1
1412:  BTSC.B  42.0
1414:  INC     W1,W1
1416:  BCLR.B  42.0
1418:  MUL.UU  W7,W4,W8
141A:  ADDC    W8,W3,W3
141C:  ADDC    W9,W1,W1
141E:  MUL.UU  W5,W7,W8
1420:  ADDC    W8,W1,W1
1422:  INC     W0,W0
1424:  CP0     W1
1426:  BTSC.B  42.1
1428:  BRA     142C
142A:  BRA     1432
142C:  CP0     W3
142E:  BTSC.B  42.1
1430:  BRA     143C
1432:  BTSC    W1.F
1434:  BRA     143C
1436:  RLC     W3,W3
1438:  RLC     W1,W1
143A:  DEC     W0,W0
143C:  MOV     W1,W2
143E:  BCLR.B  42.0
1440:  BTSS    W3.7
1442:  BRA     1456
1444:  MOV     #FF00,W7
1446:  AND     W3,W7,W3
1448:  ADD     #100,W3
144A:  ADDC    W2,#0,W2
144C:  CP0     W2
144E:  BRA     NZ,1456
1450:  CP0     W3
1452:  BRA     NZ,1456
1454:  INC     W0,W0
1456:  SWAP    W0
1458:  BCLR.B  42.0
145A:  BCLR.B  42.1
145C:  RRC     W0,W1
145E:  BTSC    W10.F
1460:  BSET    W1.F
1462:  BCLR    W2.F
1464:  SWAP    W2
1466:  XOR.B   W2L,W1L,W1L
1468:  SWAP    W3
146A:  MOV.B   W3L,W2L
146C:  MOV     W2,W0
146E:  BRA     1476
1470:  MOV     #0,W0
1472:  MOV     #0,W1
1474:  BRA     1476
1476:  MOV     #14,W5
1478:  REPEAT  #4
147A:  MOV     [--W15],[W5--]
147C:  MOV     [--W15],W5
147E:  RETURN  
1480:  MOV     W5,[W15++]
1482:  MOV     W1,W5
1484:  MOV     W0,W2
1486:  MOV     #B6,W4
1488:  RLC     W1,W1
148A:  SWAP    W1
148C:  AND     #FF,W1
148E:  SUB.B   W4L,W1L,W4L
1490:  MOV.B   W5L,W3L
1492:  BSET    W3.7
1494:  AND     #FF,W3
1496:  CLR     W0
1498:  CLR     W1
149A:  CP      W4,#1F
149C:  BRA     N,14BC
149E:  BCLR.B  42.0
14A0:  RRC     W3,W3
14A2:  RRC     W2,W2
14A4:  RRC     W1,W1
14A6:  RRC     W0,W0
14A8:  DEC     W4,W4
14AA:  BRA     NZ,149E
14AC:  BTSS    W5.F
14AE:  BRA     14BC
14B0:  NEG     W0,W0
14B2:  BRA     Z,14B8
14B4:  COM     W1,W1
14B6:  BRA     14BC
14B8:  NEG     W1,W1
14BA:  BRA     14BC
14BC:  MOV     [--W15],W5
14BE:  RETURN  
14C0:  MOV     W6,[W15++]
14C2:  MOV     W7,[W15++]
14C4:  MOV     W8,[W15++]
14C6:  MOV     W9,[W15++]
14C8:  CLR     W4
14CA:  CLR     W5
14CC:  CLR     W6
14CE:  CLR     W7
14D0:  XOR     W2,W3,W8
14D2:  BRA     Z,14F6
14D4:  MOV     #20,W8
14D6:  BCLR.B  42.0
14D8:  RLC     W0,W0
14DA:  RLC     W1,W1
14DC:  RLC     W4,W4
14DE:  RLC     W5,W5
14E0:  CP      W5,W3
14E2:  BRA     NZ,14E6
14E4:  CPB     W4,W2
14E6:  BRA     NC,14EE
14E8:  SUB     W4,W2,W4
14EA:  SUBB    W5,W3,W5
14EC:  BSET.B  42.0
14EE:  RLC     W6,W6
14F0:  RLC     W7,W7
14F2:  DEC     W8,W8
14F4:  BRA     NZ,14D6
14F6:  MOV     W7,W1
14F8:  MOV     W6,W0
14FA:  MOV     [--W15],W9
14FC:  MOV     [--W15],W8
14FE:  MOV     [--W15],W7
1500:  MOV     [--W15],W6
1502:  RETURN  
1504:  MOV     W5,[W15++]
1506:  MOV     #C,W5
1508:  REPEAT  #7
150A:  MOV     [W5++],[W15++]
150C:  BTSS    W1.F
150E:  BRA     151E
1510:  NEG     W0,W0
1512:  BRA     Z,1516
1514:  BRA     NZ,151A
1516:  NEG     W1,W1
1518:  BRA     151C
151A:  COM     W1,W1
151C:  BSET    W4.8
151E:  CLR     W5
1520:  MOV     W0,W6
1522:  MOV     W1,W7
1524:  MOV     W4,W12
1526:  BCLR    W4.F
1528:  CP0.B   W4L
152A:  BRA     NZ,152E
152C:  BRA     155E
152E:  SUB.B   W4L,#B,W5L
1530:  BRA     NC,155E
1532:  SUB.B   W4L,W5L,W4L
1534:  BTSS    W12.F
1536:  BRA     154E
1538:  BTSS    W4.8
153A:  BRA     154A
153C:  MOV     #2D,W0
153E:  BTSC.B  223.1
1540:  BRA     153E
1542:  MOV     W0,224
1544:  BCLR    W4.8
1546:  DEC     W5,W5
1548:  BRA     N,155E
154A:  MOV     #30,W0
154C:  BRA     1550
154E:  MOV     #20,W0
1550:  BTSC.B  223.1
1552:  BRA     1550
1554:  MOV     W0,224
1556:  DEC     W5,W5
1558:  BRA     NN,1550
155A:  BTSC    W4.8
155C:  DEC.B   W4L,W4L
155E:  MOV     #E,W8
1560:  MOV     #0,W9
1562:  LNK     #10
1564:  MOV     W12,[W14+W8]
1566:  DEC2    W8,W8
1568:  BRA     NN,1564
156A:  MOV     W4,W5
156C:  MOV     #A,W4
156E:  BTSC    W5.8
1570:  INC     W4,W4
1572:  BSET    W5.E
1574:  BTSC    W12.F
1576:  BSET    W5.F
1578:  CP0.B   W5L
157A:  BRA     Z,157E
157C:  DEC.B   W5L,W5L
157E:  MOV     W4,[W14]
1580:  MOV     W5,[W14+#2]
1582:  MOV     W6,W0
1584:  MOV     W7,W1
1586:  MOV     #CA00,W2
1588:  MOV     #3B9A,W3
158A:  MOV     #2710,W8
158C:  BCLR    W13.F
158E:  BCLR.B  43.0
1590:  CALL    14C0
1594:  BTG     W13.F
1596:  BTSC    W13.F
1598:  BRA     15A8
159A:  MOV     W0,[W14+#8]
159C:  MOV     W1,[W14+#A]
159E:  MOV     W0,W2
15A0:  MOV     W1,W3
15A2:  MOV     [W14+#4],W0
15A4:  MOV     [W14+#6],W1
15A6:  BRA     158E
15A8:  MOV     W2,[W14+#8]
15AA:  MOV     W3,[W14+#A]
15AC:  MOV     W4,[W14+#4]
15AE:  MOV     W5,[W14+#6]
15B0:  MOV     [W14],W4
15B2:  MOV     [W14+#2],W5
15B4:  MOV     #30,W6
15B6:  CP0     W0
15B8:  BRA     NZ,15DC
15BA:  BTSS    W5.E
15BC:  BRA     15E0
15BE:  DEC     W4,W4
15C0:  MOV     W4,[W14]
15C2:  CP0     W4
15C4:  BRA     Z,15E0
15C6:  CP.B    W4L,W5L
15C8:  BRA     Z,15CE
15CA:  BTSC.B  42.0
15CC:  BRA     15FE
15CE:  BTSS    W5.F
15D0:  BRA     15D8
15D2:  BTSS    W5.8
15D4:  BRA     15F6
15D6:  BRA     15E6
15D8:  MOV     #20,W6
15DA:  BRA     15F6
15DC:  BCLR    W5.E
15DE:  MOV     W5,[W14+#2]
15E0:  MOV     [W14+#2],W5
15E2:  BTSS    W5.8
15E4:  BRA     15F6
15E6:  BCLR    W5.8
15E8:  MOV     W5,[W14+#2]
15EA:  MOV     W0,W10
15EC:  MOV     #2D,W0
15EE:  BTSC.B  223.1
15F0:  BRA     15EE
15F2:  MOV     W0,224
15F4:  MOV     W10,W0
15F6:  ADD.B   W6L,W0L,W0L
15F8:  BTSC.B  223.1
15FA:  BRA     15F8
15FC:  MOV     W0,224
15FE:  MOV     [W14+#8],W0
1600:  MOV     [W14+#A],W1
1602:  MOV     #A,W2
1604:  CLR     W3
1606:  CP      W0,#1
1608:  BRA     Z,160C
160A:  BRA     158E
160C:  ULNK    
160E:  MOV     #1A,W5
1610:  REPEAT  #7
1612:  MOV     [--W15],[W5--]
1614:  MOV     [--W15],W5
1616:  RETURN  
*
167E:  MOV     W5,[W15++]
1680:  MOV     W6,[W15++]
1682:  MOV     W7,[W15++]
1684:  XOR     W1,W3,W4
1686:  BTSS    W4.F
1688:  BRA     1696
168A:  BCLR.B  42.0
168C:  BCLR.B  42.1
168E:  BTSS    W1.F
1690:  BRA     16DE
1692:  BSET.B  42.0
1694:  BRA     16DE
1696:  MOV     W1,W4
1698:  MOV     W0,W5
169A:  MOV     W3,W6
169C:  MOV     W2,W7
169E:  RLC     W1,W1
16A0:  SWAP    W1
16A2:  RLC     W3,W3
16A4:  SWAP    W3
16A6:  SUB.B   W3L,W1L,W1L
16A8:  BRA     Z,16B4
16AA:  BTSS    W4.F
16AC:  BRA     16DE
16AE:  MOV     #1,W0
16B0:  XOR.B   42
16B2:  BRA     16DE
16B4:  MOV.B   W4L,W1L
16B6:  MOV.B   W6L,W3L
16B8:  BCLR    W1.7
16BA:  BCLR    W3.7
16BC:  SUB.B   W3L,W1L,W1L
16BE:  BRA     Z,16CA
16C0:  BTSS    W4.F
16C2:  BRA     16DE
16C4:  MOV     #1,W0
16C6:  XOR.B   42
16C8:  BRA     16DE
16CA:  SUB     W7,W5,W1
16CC:  BRA     Z,16D8
16CE:  BTSS    W4.F
16D0:  BRA     16DE
16D2:  MOV     #1,W0
16D4:  XOR.B   42
16D6:  BRA     16DE
16D8:  BCLR.B  42.0
16DA:  BRA     16DE
16DC:  BRA     16DE
16DE:  MOV     [--W15],W7
16E0:  MOV     [--W15],W6
16E2:  MOV     [--W15],W5
16E4:  RETURN  
....................  
.................... #list 
....................  
.................... #include "lib/BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Computing and Control Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
....................  
.................... #use delay(internal = 8 MHz, clock = 32MHz) 
.................... #PIN_SELECT U1RX = PIN_B12 // pin_b14 
.................... #PIN_SELECT U1TX = PIN_B13 // pin_b15 
.................... #use rs232(UART1, BAUD = 115200, XMIT = PIN_B13, RCV = PIN_B12) 
....................  
.................... #PIN_SELECT INT1 = PIN_B4 
.................... #PIN_SELECT INT2 = PIN_B5 
....................  
.................... #PIN_SELECT oc1 = PIN_B2 
....................  
.................... #define TIME_PERIOD 20000 
.................... #define RESOLUTION 600f 
.................... #define Lead 8f          // Lead length 
.................... #define SET_POINT 400f 
....................  
.................... long count = 0; 
.................... float time = 0.0; 
.................... float u = 12.0; 
.................... float y = 0.0; 
....................  
.................... boolean trig = false; 
....................  
.................... float findDistanceZ(int pulse){ 
*
12BC:  MOV     W5,[W15++]
12BE:  MOV     W6,[W15++]
12C0:  MOV     W7,[W15++]
12C2:  MOV     W8,[W15++]
....................     return (pulse / 2.0) / RESOLUTION * Lead; 
12C4:  MOV     824,W0
12C6:  CLR     W3
12C8:  BTSC    W0.F
12CA:  SETM    W3
12CC:  MOV     W3,W1
12CE:  MOV     W3,W2
12D0:  CALL    FA6
12D4:  MOV     #0,W4
12D6:  MOV     #0,W5
12D8:  MOV     #0,W6
12DA:  MOV     #4000,W7
12DC:  CALL    100A
12E0:  MOV     W0,W5
12E2:  MOV     W1,W6
12E4:  MOV     W2,W7
12E6:  MOV     W3,W8
12E8:  MOV     W5,[W15++]
12EA:  MOV     W6,[W15++]
12EC:  MOV     W7,[W15++]
12EE:  MOV     W5,W0
12F0:  MOV     W6,W1
12F2:  MOV     W7,W2
12F4:  MOV     W8,W3
12F6:  MOV     #0,W4
12F8:  MOV     #0,W5
12FA:  MOV     #C000,W6
12FC:  MOV     #4082,W7
12FE:  CALL    100A
1302:  MOV     [--W15],W7
1304:  MOV     [--W15],W6
1306:  MOV     [--W15],W5
1308:  MOV     W0,W5
130A:  MOV     W1,W6
130C:  MOV     W2,W7
130E:  MOV     W3,W8
1310:  MOV     W5,[W15++]
1312:  MOV     W6,[W15++]
1314:  MOV     W7,[W15++]
1316:  MOV     W5,W0
1318:  MOV     W6,W1
131A:  MOV     W7,W2
131C:  MOV     W8,W3
131E:  MOV     #0,W4
1320:  MOV     #0,W5
1322:  MOV     #0,W6
1324:  MOV     #4020,W7
1326:  CALL    1168
132A:  MOV     [--W15],W7
132C:  MOV     [--W15],W6
132E:  MOV     [--W15],W5
1330:  CALL    1278
1334:  MOV     W1,W0
1336:  MOV     W2,W1
1338:  MOV     [--W15],W8
133A:  MOV     [--W15],W7
133C:  MOV     [--W15],W6
133E:  MOV     [--W15],W5
1340:  RETURN  
.................... } 
....................  
.................... void printFloat(float n) 
*
1618:  MOV     W5,[W15++]
161A:  MOV     W6,[W15++]
161C:  MOV     81A,W0
161E:  MOV     81C,W1
1620:  CALL    1342
1624:  CLR     W1
1626:  BTSC    W0.F
1628:  SETM    W1
162A:  MOV     W0,81E
162C:  MOV     W1,820
162E:  MOV     81E,W0
1630:  MOV     820,W1
1632:  CALL    136E
1636:  BSET.B  43.0
1638:  MOV     W0,W2
163A:  MOV     W1,W3
163C:  MOV     81A,W0
163E:  MOV     81C,W1
1640:  CALL    DFC
1644:  MOV     W0,W5
1646:  MOV     W1,W6
1648:  MOV     W5,W0
164A:  MOV     W6,W1
164C:  MOV     #0,W2
164E:  MOV     #42C8,W3
1650:  CALL    13BC
1654:  CALL    1480
1658:  MOV     W0,822
165A:  MOV     W1,824
.................... { 
....................     long dec = (int)n; 
....................     long degit = (n - (float)dec) * 100; 
....................     printf("%d.%d",dec,degit); 
165C:  MOV     81E,W0
165E:  MOV     820,W1
1660:  MOV     #0,W4
1662:  CALL    1504
1666:  BTSC.B  223.1
1668:  BRA     1666
166A:  MOV     #2E,W4
166C:  MOV     W4,224
166E:  MOV     822,W0
1670:  MOV     824,W1
1672:  MOV     #0,W4
1674:  CALL    1504
1678:  MOV     [--W15],W6
167A:  MOV     [--W15],W5
167C:  RETURN  
.................... } 
....................  
.................... #INT_TIMER3 
.................... void TIMER3_isr(void){ 
*
16E6:  PUSH    42
16E8:  PUSH    36
16EA:  PUSH    32
16EC:  MOV     W0,[W15++]
16EE:  MOV     #2,W0
16F0:  REPEAT  #C
16F2:  MOV     [W0++],[W15++]
....................     if(trig){ 
16F4:  BTSS.B  810.0
16F6:  BRA     1798
....................         time+=0.01; 
16F8:  BCLR.B  43.0
16FA:  MOV     804,W0
16FC:  MOV     806,W1
16FE:  MOV     #D70A,W2
1700:  MOV     #3C23,W3
1702:  CALL    DFC
1706:  MOV     W0,804
1708:  MOV     W1,806
....................         y =  SET_POINT - findDistanceZ(count/2.0); 
170A:  MOV     800,W0
170C:  MOV     802,W1
170E:  CLR     W3
1710:  BTSC    W1.F
1712:  SETM    W3
1714:  MOV     W3,W2
1716:  CALL    FA6
171A:  MOV     #0,W4
171C:  MOV     #0,W5
171E:  MOV     #0,W6
1720:  MOV     #4000,W7
1722:  CALL    100A
1726:  CALL    1112
172A:  MOV     W0,W5
172C:  MOV     W5,824
172E:  CALL    12BC
1732:  BSET.B  43.0
1734:  MOV     W0,W2
1736:  MOV     W1,W3
1738:  MOV     #0,W0
173A:  MOV     #43C8,W1
173C:  CALL    DFC
1740:  MOV     W0,80C
1742:  MOV     W1,80E
....................         printFloat(time); 
1744:  PUSH    804
1746:  POP     81A
1748:  PUSH    806
174A:  POP     81C
174C:  CALL    1618
....................         printf(","); 
1750:  BTSC.B  223.1
1752:  BRA     1750
1754:  MOV     #2C,W4
1756:  MOV     W4,224
....................         printFloat(u); 
1758:  PUSH    808
175A:  POP     81A
175C:  PUSH    80A
175E:  POP     81C
1760:  CALL    1618
....................         printf(","); 
1764:  BTSC.B  223.1
1766:  BRA     1764
1768:  MOV     #2C,W4
176A:  MOV     W4,224
....................         printFloat(y); 
176C:  PUSH    80C
176E:  POP     81A
1770:  PUSH    80E
1772:  POP     81C
1774:  CALL    1618
....................         printf("\r\n"); 
1778:  BTSC.B  223.1
177A:  BRA     1778
177C:  MOV     #D,W4
177E:  MOV     W4,224
1780:  BTSC.B  223.1
1782:  BRA     1780
1784:  MOV     #A,W4
1786:  MOV     W4,224
....................  
....................         if(time > 10.0){ 
1788:  MOV     #0,W0
178A:  MOV     #4120,W1
178C:  MOV     804,W2
178E:  MOV     806,W3
1790:  CALL    167E
1794:  BRA     NC,1798
....................             trig = false; 
1796:  BCLR.B  810.0
....................         } 
....................     } 
.................... } 
....................  
1798:  BCLR.B  85.0
179A:  MOV     #1A,W0
179C:  REPEAT  #C
179E:  MOV     [--W15],[W0--]
17A0:  MOV     [--W15],W0
17A2:  POP     32
17A4:  POP     36
17A6:  POP     42
17A8:  RETFIE  
.................... #INT_EXT1 
.................... void INT_EXT_INPUT1(void){ 
17AA:  PUSH    42
17AC:  PUSH    36
17AE:  PUSH    32
17B0:  MOV     W0,[W15++]
17B2:  MOV     #2,W0
17B4:  REPEAT  #C
17B6:  MOV     [W0++],[W15++]
....................     if(trig){ 
17B8:  BTSS.B  810.0
17BA:  BRA     17D0
....................         if (input(PIN_B5) == 1){ 
17BC:  BSET.B  2C8.5
17BE:  BTSS.B  2CA.5
17C0:  BRA     17CA
....................             count++; 
17C2:  INC     0800
17C4:  BTSC.B  42.1
17C6:  INC     0802
....................         }else{ 
17C8:  BRA     17D0
....................             count--; 
17CA:  DEC     0800
17CC:  BTSS.B  42.0
17CE:  DEC     0802
....................         } 
....................     } 
.................... } 
....................  
....................  
17D0:  BCLR.B  86.4
17D2:  MOV     #1A,W0
17D4:  REPEAT  #C
17D6:  MOV     [--W15],[W0--]
17D8:  MOV     [--W15],W0
17DA:  POP     32
17DC:  POP     36
17DE:  POP     42
17E0:  RETFIE  
.................... #INT_EXT2 
.................... void INT_EXT_INPUT2(void){ 
17E2:  PUSH    42
17E4:  PUSH    36
17E6:  PUSH    32
17E8:  MOV     W0,[W15++]
17EA:  MOV     #2,W0
17EC:  REPEAT  #C
17EE:  MOV     [W0++],[W15++]
....................     if(trig){ 
17F0:  BTSS.B  810.0
17F2:  BRA     1808
....................         if (input(PIN_B4) == 1){ 
17F4:  BSET.B  2C8.4
17F6:  BTSS.B  2CA.4
17F8:  BRA     1802
....................             count--; 
17FA:  DEC     0800
17FC:  BTSS.B  42.0
17FE:  DEC     0802
....................         } 
1800:  BRA     1808
....................         else{ 
....................             count++; 
1802:  INC     0800
1804:  BTSC.B  42.1
1806:  INC     0802
....................         } 
....................     } 
1808:  BCLR.B  87.5
180A:  MOV     #1A,W0
180C:  REPEAT  #C
180E:  MOV     [--W15],[W0--]
1810:  MOV     [--W15],W0
1812:  POP     32
1814:  POP     36
1816:  POP     42
1818:  RETFIE  
.................... } 
....................  
.................... void setupEncoderInterrupt(){ 
....................     enable_interrupts(INT_EXT1); 
*
182A:  BSET.B  96.4
....................     ext_int_edge(1, H_TO_L); 
182C:  BSET.B  82.1
....................     enable_interrupts(INT_EXT2); 
182E:  BSET.B  97.5
....................     ext_int_edge(2, H_TO_L); 
1830:  BSET.B  82.2
1832:  RETURN  
.................... } 
....................  
.................... void initTimer23(){ 
....................     setup_timer2(TMR_INTERNAL | TMR_DIV_BY_8 | TMR_32_BIT, TIME_PERIOD); 
*
181A:  CLR     110
181C:  MOV     #4E20,W4
181E:  MOV     W4,10C
1820:  CLR     10E
1822:  MOV     #8018,W4
1824:  MOV     W4,110
....................     enable_interrupts(INT_TIMER3); 
1826:  BSET.B  95.0
1828:  RETURN  
.................... } 
....................  
.................... void main(void){ 
*
1834:  MOV     #2780,W15
1836:  MOV     #27FF,W0
1838:  MOV     W0,20
183A:  NOP     
183C:  BSET.B  81.7
183E:  MOV     #46,W0
1840:  MOV.B   W0L,742
1842:  MOV     #57,W0
1844:  MOV.B   W0L,742
1846:  BCLR.B  742.6
1848:  MOV     #43F,W0
184A:  MOV     W0,680
184C:  MOV     #3F05,W0
184E:  MOV     W0,682
1850:  MOV     #3F0C,W0
1852:  MOV     W0,6A4
1854:  MOV     #12,W0
1856:  MOV     W0,6C2
1858:  MOV     #300,W0
185A:  MOV     W0,6CC
185C:  MOV     #46,W0
185E:  MOV.B   W0L,742
1860:  MOV     #57,W0
1862:  MOV.B   W0L,742
1864:  BSET.B  742.6
1866:  CLR     744
1868:  MOV     #8000,W4
186A:  MOV     W4,220
186C:  MOV     #400,W4
186E:  MOV     W4,222
1870:  BSET.B  220.3
1872:  MOV     #22,W4
1874:  MOV     W4,228
1876:  CLR     800
1878:  CLR     802
187A:  CLR     804
187C:  CLR     806
187E:  CLR     808
1880:  MOV     #4140,W4
1882:  MOV     W4,80A
1884:  CLR     80C
1886:  CLR     80E
1888:  BCLR.B  810.0
188A:  SETM    32C
....................  
....................     // initialize count to zero 
....................     count = 0; 
188C:  CLR     800
188E:  CLR     802
....................  
....................     disable_interrupts(GLOBAL); 
1890:  BCLR.B  81.7
1892:  MOV     #E0,W4
1894:  MOV     W4,42
1896:  BSET.B  81.7
....................     initTimer23(); 
1898:  CALL    181A
....................     setupEncoderInterrupt(); 
189C:  CALL    182A
....................     enable_interrupts(GLOBAL); 
18A0:  BCLR.B  81.7
18A2:  CLR     42
18A4:  BSET.B  81.7
....................  
....................     while (TRUE){ 
....................         // press SW3 to start sampling log 
....................         if(input(PIN_B6) == 0){ 
18A6:  BSET.B  2C8.6
18A8:  BTSC.B  2CA.6
18AA:  BRA     18B6
....................             trig = true; 
18AC:  BSET.B  810.0
....................             time = 0.0; 
18AE:  CLR     804
18B0:  CLR     806
....................             y = 0.0; 
18B2:  CLR     80C
18B4:  CLR     80E
....................         } 
18B6:  BRA     18A6
....................     } 
.................... } 
18B8:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
